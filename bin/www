#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var path = require('path');
var debug = require('debug')('shou-video:server');
var http = require('http');

var fs = require('fs');
var https = require('https');
var privateKey = fs.readFileSync(path.join(__dirname, '/private.pem'), 'utf8');
var certificate = fs.readFileSync(path.join(__dirname, '/file.crt'), 'utf8');
var credentials = {key: privateKey, cert: certificate};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
var sport = normalizePort(process.env.PORT || '6000');

app.set('port', port);

/**
 * Create HTTP server.
 */

var httpServer = http.createServer(app);

/**
 * Create HTTPS server.
 */

var httpsServer = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(port, function () {
    console.log('服务器已经启动，地址为：http://127.0.0.1:%s', port);
});

httpsServer.listen(sport, function () {
    console.log('HTTPS服务器已经启动，地址为: https://127.0.0.1:%s', sport);
});

httpServer.on('error', onError);
httpServer.on('listening', onListening);

// Welcome
app.get('/', function (req, res) {
    if (req.protocol === 'https') {
        res.status(200).send('Welcome to Safety Land!');
    }
    else {
        res.status(200).send('Welcome!');
    }
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = httpServer.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
